import { defineEventHandler, getQuery, getRequestHeader, createError } from 'h3';

export default defineEventHandler(async (event) => {
    const config = useRuntimeConfig();
    const pathParam = event.context.params?.path;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º path
    const path = [pathParam].flat().join('/');

    // –ü–æ–ª—É—á–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const query = getQuery(event);
    const queryString = new URLSearchParams(query as any).toString();
    const targetUrl = `${config.public.API_URL}/${path}${queryString ? '?' + queryString : ''}`;

    // console.log("üîó –ó–∞–ø—Ä–æ—Å –∫ API:", targetUrl);

    try {
        const headers = {
            'Content-Type': 'application/json',
            ...(getRequestHeader(event, 'Authorization') && {
                Authorization: getRequestHeader(event, 'Authorization')
            })
        };

        const response = await $fetch(targetUrl, { method: 'GET', headers });

     //   console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç API:", response);

        return response;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:", {
            message: error.message,
            stack: error.stack,
            url: targetUrl
        });

        return createError({ statusCode: 500, statusMessage: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});
