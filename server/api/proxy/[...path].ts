import {defineEventHandler, getQuery, getRequestHeader, createError} from 'h3';

export default defineEventHandler(async (event) => {
    const config = useRuntimeConfig();
    const pathParam = event.context.params?.path;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º path
    const path = [pathParam].flat().join('/');

    // –ü–æ–ª—É—á–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const query = getQuery(event);
    const queryString = new URLSearchParams(query as any).toString();
    const targetUrl = `${config.public.API_URL}/${path}/${queryString ? '?' + queryString : ''}`;

    try {
        const headers = {
            'Content-Type': 'application/json',
            ...(getRequestHeader(event, 'Authorization') && {
                Authorization: getRequestHeader(event, 'Authorization')
            })
        };

        const response = await $fetch(targetUrl, {method: 'GET', headers});

        return response;
    } catch (error: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:", error);

        console.error("üìå –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", {
            message: error?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
            stack: error?.stack || "–ù–µ—Ç stack-trace",
            url: targetUrl,
            status: error?.status || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å",
            response: error?.response || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
        });

        return createError({statusCode: 500, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"});
    }
});
